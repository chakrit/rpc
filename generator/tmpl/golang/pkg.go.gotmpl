// <auto-generated />
//
// expected import: {{ .ImportPath }}
package {{ .Name }}

{{ $pkg := . }}

import (
    "encoding/json"
    "math"

    {{  range $dep := .Dependencies -}}
    {{- if . -}}
    {{ .MangledName }} "{{ .ImportPath }}"
    {{  end -}}
    {{- end  }}
)

var _ = math.Pi
var _ = json.Marshal

{{ range $name, $type := .Namespace.Types }}
type {{ $name }} struct {
    {{  range $name, $prop := .Properties -}}
    {{ pascal $name }} {{ asReference (resolve $pkg $prop.Type) }} `json:"{{ $name }}" db:"{{ snake $name}}"`
    {{  end -}}
}

func (obj *{{$name}}) MarshalJSON() ([]byte, error) {
    outobj := struct{
        {{  range $name, $prop := .Properties -}}
        {{ pascal $name }} {{ asMarshalTarget (resolve $pkg $prop.Type) }} `json:"{{ $name }}"`
        {{  end -}}
    }{
        {{  range $name, $prop := .Properties -}}
        {{ pascal $name }}: {{ marshaler (resolve $pkg $prop.Type) }}(obj.{{ pascal $name }}),
        {{  end -}}
    }
    return json.Marshal(outobj)
}

func (obj *{{$name}}) UnmarshalJSON(buf []byte) error {
    inobj := struct{
        {{  range $name, $prop := .Properties -}}
        {{ pascal $name }} {{ asMarshalTarget (resolve $pkg $prop.Type) }} `json:"{{ $name }}"`
        {{  end -}}
    }{}

    if err := json.Unmarshal(buf, &inobj); err != nil {
        return err
    }

    {{  range $name, $prop := .Properties -}}
    obj.{{ pascal $name }} = {{ unmarshaler (resolve $pkg $prop.Type) }}(inobj.{{ pascal $name }})
    {{  end -}}
    return nil
}
{{ end }}

type Interface interface {
    {{  range $name, $rpc := .Namespace.RPCs -}}
    {{ $name }}(
        {{- range $name, $arg := .InputTypes -}}
        {{ asReference (resolve $pkg $arg) }},
        {{- end -}}
    ) (
        {{- range $name, $arg := .OutputTypes -}}
        {{ asReference (resolve $pkg $arg) }},
        {{- end -}}
        error,
    )
    {{ end }}
}
