module {{ .Name }} exposing (..)

import Http
import Json.Decode as D
import Json.Encode as E
import Dict exposing (Dict)
import Task exposing (Task)
import Time exposing (Posix)
import Bytes exposing (Bytes)
import Bytes.Encode
import RpcUtil exposing (Config, RpcError, RpcResult, decodeApply, fromHttpResult)
{{- range $import := .Imports  }}
import {{ $import.Name }}
{{- end  }}


{{  range $type := .Types  }}
type alias {{ $type.Name }} =
    {{- range $idx, $field := $type.Fields  }}
    {{ ifFirst $idx "{" "," }} {{ $field.Name }} : {{ (resolve $field.Type).Name }}
    {{- end  }}
    }

default{{ $type.Name }} : {{ $type.Name }}
default{{ $type.Name }} =
    {{- range $idx, $field := $type.Fields  }}
    {{ ifFirst $idx "{" "," }} {{ $field.Name }} = {{ (resolve $field.Type).Default }}
    {{- end }}
    }

encode{{ $type.Name }} : {{ $type.Name }} -> E.Value
encode{{ $type.Name }} obj =
    E.object
        {{- range $idx, $field := $type.Fields  }}
        {{ ifFirst $idx "[" "," }} ( "{{ $field.Name }}", {{ (resolve $field.Type).Encode }} obj.{{ $field.Name }} )
        {{- end }}
        ]

decode{{ $type.Name }} : D.Decoder {{ $type.Name }}
decode{{ $type.Name }} =
    {{  if (eq (len $type.Fields) 0) -}}
        D.succeed {}
    {{  else if (eq (len $type.Fields) 1) -}}
        {{ (resolve (index $type.Fields 0).Type).Decode }}
            |> D.field "{{ (index $type.Fields 0).Name }}"
            |> D.maybe
            |> D.map (Maybe.withDefault ({{ (resolve (index $type.Fields 0).Type).Default }}))
            |> D.map {{ $type.Name }}
    {{  else if (le (len $type.Fields) 8) -}}
        D.map{{ len $type.Fields }} {{ $type.Name }}
            {{- range $idx, $field := $type.Fields  }}
                ({{ (resolve $field.Type).Decode }}
                    |> D.field "{{ $field.Name }}"
                    |> D.maybe
                    |> D.map (Maybe.withDefault ({{ (resolve $field.Type).Default }}))
                )
            {{- end  }}
    {{  else -}}
        D.succeed {{ $type.Name }}
            {{- range $idx, $field := $type.Fields  }}
            |> ({{ (resolve $field.Type).Decode }}
                |> D.field "{{ $field.Name }}"
                |> D.maybe
                |> D.map (Maybe.withDefault ({{ (resolve $field.Type).Default }}))
                |> decodeApply)
            {{- end  }}
    {{  end  }}
{{  end  }}

{{  range $tuple := .Tuples  }}
type alias {{ $tuple.Name }} =
    {{  range $idx, $arg := $tuple.Args -}}
    {{ ifFirst $idx "(" ", " }}{{ (resolve $arg).Name }}
    {{- else -}}
    (()
    {{- end -}}
    )

encode{{ $tuple.Name }} : {{ $tuple.Name }} -> E.Value
encode{{ $tuple.Name }}
    {{  range $idx, $arg := $tuple.Args -}}
    {{ ifFirst $idx "(" "," }}arg{{ $idx }}
    {{- else -}}
    (
    {{- end -}}
    ) =
        E.list (identity)
            {{  range $idx, $arg := $tuple.Args -}}
            {{ ifFirst $idx "[" "," }} {{ (resolve $arg).Encode }} arg{{ $idx }}
            {{  else -}}
            [
            {{  end -}}
        ]

decode{{ $tuple.Name}} : D.Decoder {{ $tuple.Name }}
decode{{ $tuple.Name }} =
    {{- if (eq (len $tuple.Args) 0)  }}
        D.succeed ()
    {{- else if (eq (len $tuple.Args) 1) }}
        {{ (resolve (index $tuple.Args 0)).Decode }}
            |> D.index 0
            |> D.maybe
            |> D.map (Maybe.withDefault ({{ (resolve (index $tuple.Args 0)).Default }}))
            |> D.map (\a -> (a))
    {{- else  }}
        D.map{{ len $tuple.Args }} (
        {{- range $idx, $_ := $tuple.Args -}}
            {{ ifFirst $idx "\\" " " }}arg{{ $idx }}
        {{- end  }} ->
        {{- range $idx, $_ := $tuple.Args -}}
                {{ ifFirst $idx " (" ", " }}arg{{ $idx }}
        {{- end -}}
        ))
        {{- range $idx, $arg := $tuple.Args  }}
            ({{ (resolve $arg).Decode }}
                |> D.index {{ $idx }}
                |> D.maybe
                |> D.map (Maybe.withDefault ({{ (resolve $arg).Default }}))
            )
        {{- end  }}
    {{  end  }}
{{  end  }}

{{  range $rpc := .RPCFuncs  }}
call{{ $rpc.Name }}Task : Config -> InputFor{{ $rpc.Name }} -> Task RpcError OutputFor{{ $rpc.Name }}
call{{ $rpc.Name }}Task config input =
    let
        body =
            Http.jsonBody (encodeInputFor{{ $rpc.Name }} input)

        resolver =
            RpcUtil.resolver decodeOutputFor{{ $rpc.Name }}
    in
    Http.task
        { method = "POST"
        , headers = config.headers
        , url = config.baseUrl ++ "/{{ $rpc.RPCPath }}"
        , body = body
        , resolver = resolver
        , timeout = Nothing
        }


call{{ $rpc.Name }} : Config -> InputFor{{ $rpc.Name }} -> (RpcResult OutputFor{{ $rpc.Name }} -> a) -> Cmd a
call{{ $rpc.Name }} config input mapResult =
    let
        body = Http.jsonBody (encodeInputFor{{ $rpc.Name }} input)
        expect = Http.expectJson (fromHttpResult >> mapResult) (RpcUtil.decoder decodeOutputFor{{ $rpc.Name }})
    in
    Http.request
        { method = "POST"
        , headers = config.headers
        , url = config.baseUrl ++ "/{{ $rpc.RPCPath }}"
        , body = body
        , expect = expect
        , timeout = Nothing
        , tracker = Nothing
        }
{{  end  }}
