module {{ .Name }} exposing (..)

import Http
import Json.Encode as E
import Json.Decode as D


type alias Config =
    { baseUrl : String
    , headers : List Http.Header
    }


type CallResult a
    = HttpError Http.Error
    | ApiError String
    | Success a


mapResult : { onHttpErr : Http.Error -> msg, onApiErr : String -> msg, onSuccess : a -> msg } -> CallResult a -> msg
mapResult mapper result =
    case result of
        HttpError httpErr ->
            mapper.onHttpErr httpErr

        ApiError err ->
            mapper.onApiErr err

        Success obj ->
            mapper.onSuccess obj


unwrapHttpResult : (Result Http.Error (CallResult a)) -> CallResult a
unwrapHttpResult result =
    case result of
        Ok callResult ->
            callResult

        Err httpErr ->
            HttpError httpErr


decodeCallResult : D.Decoder a -> D.Decoder (CallResult a)
decodeCallResult decodeReturns =
    let
        mapResultObj : Maybe String -> a -> CallResult a
        mapResultObj err ret =
            case err of
                Just str ->
                    ApiError str

                Nothing ->
                    Success ret
    in
    D.map2 (mapResultObj)
        (D.field "error" (D.maybe D.string))
        (D.field "returns" decodeReturns)
