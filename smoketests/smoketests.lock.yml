- name: ./smoketests.yml \ Basics \ Install
  commands:
    - command: go generate ../...
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - ""
        - name: stderr
          data:
            - ""
    - command: go install -v ..
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - ""
        - name: stderr
          data:
            - ""
- name: ./smoketests.yml \ Basics \ Lex
  commands:
    - command: $(go env GOPATH)/bin/rpc -lex todo-simple.rpc
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - '{"type":"keyword","value":"option","pos":{"byte_no":6,"line_no":0,"col_no":6}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":7,"line_no":0,"col_no":7}}'
            - '{"type":"identifier","value":"transport","pos":{"byte_no":16,"line_no":0,"col_no":16}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":17,"line_no":0,"col_no":17}}'
            - '{"type":"value-string","value":"http","pos":{"byte_no":23,"line_no":0,"col_no":23}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":24,"line_no":0,"col_no":24}}'
            - '{"type":"keyword","value":"option","pos":{"byte_no":30,"line_no":1,"col_no":6}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":31,"line_no":1,"col_no":7}}'
            - '{"type":"identifier","value":"encoding","pos":{"byte_no":39,"line_no":1,"col_no":15}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":40,"line_no":1,"col_no":16}}'
            - '{"type":"value-string","value":"json","pos":{"byte_no":46,"line_no":1,"col_no":22}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":47,"line_no":1,"col_no":23}}'
            - '{"type":"keyword","value":"option","pos":{"byte_no":53,"line_no":2,"col_no":6}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":54,"line_no":2,"col_no":7}}'
            - '{"type":"identifier","value":"ruby_module","pos":{"byte_no":65,"line_no":2,"col_no":18}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":66,"line_no":2,"col_no":19}}'
            - '{"type":"value-string","value":"minitodo","pos":{"byte_no":76,"line_no":2,"col_no":29}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":77,"line_no":2,"col_no":30}}'
            - '{"type":"keyword","value":"option","pos":{"byte_no":83,"line_no":3,"col_no":6}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":84,"line_no":3,"col_no":7}}'
            - '{"type":"identifier","value":"go_package","pos":{"byte_no":94,"line_no":3,"col_no":17}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":95,"line_no":3,"col_no":18}}'
            - '{"type":"value-string","value":"minitodo","pos":{"byte_no":105,"line_no":3,"col_no":28}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":106,"line_no":3,"col_no":29}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":107,"line_no":4,"col_no":1}}'
            - '{"type":"keyword","value":"type","pos":{"byte_no":111,"line_no":5,"col_no":4}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":112,"line_no":5,"col_no":5}}'
            - '{"type":"identifier","value":"Failure","pos":{"byte_no":119,"line_no":5,"col_no":12}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":120,"line_no":5,"col_no":13}}'
            - '{"type":"block-start","value":"{","pos":{"byte_no":121,"line_no":5,"col_no":14}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":122,"line_no":5,"col_no":15}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":126,"line_no":6,"col_no":4}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":132,"line_no":6,"col_no":10}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":133,"line_no":6,"col_no":11}}'
            - '{"type":"identifier","value":"code","pos":{"byte_no":137,"line_no":6,"col_no":15}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":138,"line_no":6,"col_no":16}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":142,"line_no":7,"col_no":4}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":148,"line_no":7,"col_no":10}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":149,"line_no":7,"col_no":11}}'
            - '{"type":"identifier","value":"description","pos":{"byte_no":160,"line_no":7,"col_no":22}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":161,"line_no":7,"col_no":23}}'
            - '{"type":"block-end","value":"}","pos":{"byte_no":162,"line_no":8,"col_no":1}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":163,"line_no":8,"col_no":2}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":164,"line_no":9,"col_no":1}}'
            - '{"type":"keyword","value":"type","pos":{"byte_no":168,"line_no":10,"col_no":4}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":169,"line_no":10,"col_no":5}}'
            - '{"type":"identifier","value":"TodoItem","pos":{"byte_no":177,"line_no":10,"col_no":13}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":178,"line_no":10,"col_no":14}}'
            - '{"type":"block-start","value":"{","pos":{"byte_no":179,"line_no":10,"col_no":15}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":180,"line_no":10,"col_no":16}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":184,"line_no":11,"col_no":4}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":190,"line_no":11,"col_no":10}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":191,"line_no":11,"col_no":11}}'
            - '{"type":"identifier","value":"uuid","pos":{"byte_no":195,"line_no":11,"col_no":15}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":196,"line_no":11,"col_no":16}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":200,"line_no":12,"col_no":4}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":206,"line_no":12,"col_no":10}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":207,"line_no":12,"col_no":11}}'
            - '{"type":"identifier","value":"description","pos":{"byte_no":218,"line_no":12,"col_no":22}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":219,"line_no":12,"col_no":23}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":223,"line_no":13,"col_no":4}}'
            - '{"type":"keyword","value":"time","pos":{"byte_no":227,"line_no":13,"col_no":8}}'
            - '{"type":"whitespace","value":"   ","pos":{"byte_no":230,"line_no":13,"col_no":11}}'
            - '{"type":"identifier","value":"ctime","pos":{"byte_no":235,"line_no":13,"col_no":16}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":236,"line_no":13,"col_no":17}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":240,"line_no":14,"col_no":4}}'
            - '{"type":"keyword","value":"bool","pos":{"byte_no":244,"line_no":14,"col_no":8}}'
            - '{"type":"whitespace","value":"   ","pos":{"byte_no":247,"line_no":14,"col_no":11}}'
            - '{"type":"identifier","value":"completed","pos":{"byte_no":256,"line_no":14,"col_no":20}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":257,"line_no":14,"col_no":21}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":261,"line_no":15,"col_no":4}}'
            - '{"type":"keyword","value":"data","pos":{"byte_no":265,"line_no":15,"col_no":8}}'
            - '{"type":"whitespace","value":"   ","pos":{"byte_no":268,"line_no":15,"col_no":11}}'
            - '{"type":"identifier","value":"metadata","pos":{"byte_no":276,"line_no":15,"col_no":19}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":277,"line_no":15,"col_no":20}}'
            - '{"type":"block-end","value":"}","pos":{"byte_no":278,"line_no":16,"col_no":1}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":279,"line_no":16,"col_no":2}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":280,"line_no":17,"col_no":1}}'
            - '{"type":"keyword","value":"rpc","pos":{"byte_no":283,"line_no":18,"col_no":3}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":284,"line_no":18,"col_no":4}}'
            - '{"type":"identifier","value":"List","pos":{"byte_no":288,"line_no":18,"col_no":8}}'
            - '{"type":"arg-list-start","value":"(","pos":{"byte_no":289,"line_no":18,"col_no":9}}'
            - '{"type":"arg-list-end","value":")","pos":{"byte_no":290,"line_no":18,"col_no":10}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":291,"line_no":18,"col_no":11}}'
            - '{"type":"keyword","value":"list","pos":{"byte_no":295,"line_no":18,"col_no":15}}'
            - '{"type":"type-arg-list-start","value":"\u003c","pos":{"byte_no":296,"line_no":18,"col_no":16}}'
            - '{"type":"identifier","value":"TodoItem","pos":{"byte_no":304,"line_no":18,"col_no":24}}'
            - '{"type":"type-arg-list-end","value":"\u003e","pos":{"byte_no":305,"line_no":18,"col_no":25}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":306,"line_no":18,"col_no":26}}'
            - '{"type":"keyword","value":"rpc","pos":{"byte_no":309,"line_no":19,"col_no":3}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":310,"line_no":19,"col_no":4}}'
            - '{"type":"identifier","value":"Get","pos":{"byte_no":313,"line_no":19,"col_no":7}}'
            - '{"type":"arg-list-start","value":"(","pos":{"byte_no":314,"line_no":19,"col_no":8}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":320,"line_no":19,"col_no":14}}'
            - '{"type":"arg-list-end","value":")","pos":{"byte_no":321,"line_no":19,"col_no":15}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":322,"line_no":19,"col_no":16}}'
            - '{"type":"identifier","value":"TodoItem","pos":{"byte_no":330,"line_no":19,"col_no":24}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":331,"line_no":19,"col_no":25}}'
            - '{"type":"keyword","value":"rpc","pos":{"byte_no":334,"line_no":20,"col_no":3}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":335,"line_no":20,"col_no":4}}'
            - '{"type":"identifier","value":"Put","pos":{"byte_no":338,"line_no":20,"col_no":7}}'
            - '{"type":"arg-list-start","value":"(","pos":{"byte_no":339,"line_no":20,"col_no":8}}'
            - '{"type":"identifier","value":"TodoItem","pos":{"byte_no":347,"line_no":20,"col_no":16}}'
            - '{"type":"arg-list-end","value":")","pos":{"byte_no":348,"line_no":20,"col_no":17}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":349,"line_no":20,"col_no":18}}'
            - '{"type":"identifier","value":"TodoItem","pos":{"byte_no":357,"line_no":20,"col_no":26}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":358,"line_no":20,"col_no":27}}'
            - '{"type":"keyword","value":"rpc","pos":{"byte_no":361,"line_no":21,"col_no":3}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":362,"line_no":21,"col_no":4}}'
            - '{"type":"identifier","value":"Delete","pos":{"byte_no":368,"line_no":21,"col_no":10}}'
            - '{"type":"arg-list-start","value":"(","pos":{"byte_no":369,"line_no":21,"col_no":11}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":375,"line_no":21,"col_no":17}}'
            - '{"type":"arg-list-end","value":")","pos":{"byte_no":376,"line_no":21,"col_no":18}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":377,"line_no":21,"col_no":19}}'
            - '{"type":"identifier","value":"TodoItem","pos":{"byte_no":385,"line_no":21,"col_no":27}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":386,"line_no":21,"col_no":28}}'
            - '{"type":"end-of-file","value":"","pos":{"byte_no":386,"line_no":22,"col_no":0}}'
        - name: stderr
          data:
            - ""
    - command: $(go env GOPATH)/bin/rpc -lex todo-complex.rpc
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - '{"type":"keyword","value":"option","pos":{"byte_no":6,"line_no":0,"col_no":6}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":7,"line_no":0,"col_no":7}}'
            - '{"type":"identifier","value":"go_import","pos":{"byte_no":16,"line_no":0,"col_no":16}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":17,"line_no":0,"col_no":17}}'
            - '{"type":"value-string","value":"github.com/chakrit/rpc/examples","pos":{"byte_no":50,"line_no":0,"col_no":50}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":51,"line_no":0,"col_no":51}}'
            - '{"type":"keyword","value":"option","pos":{"byte_no":57,"line_no":1,"col_no":6}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":58,"line_no":1,"col_no":7}}'
            - '{"type":"identifier","value":"go_package","pos":{"byte_no":68,"line_no":1,"col_no":17}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":69,"line_no":1,"col_no":18}}'
            - '{"type":"value-string","value":"examples","pos":{"byte_no":79,"line_no":1,"col_no":28}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":80,"line_no":1,"col_no":29}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":81,"line_no":2,"col_no":1}}'
            - '{"type":"keyword","value":"type","pos":{"byte_no":85,"line_no":3,"col_no":4}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":86,"line_no":3,"col_no":5}}'
            - '{"type":"identifier","value":"Failure","pos":{"byte_no":93,"line_no":3,"col_no":12}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":94,"line_no":3,"col_no":13}}'
            - '{"type":"block-start","value":"{","pos":{"byte_no":95,"line_no":3,"col_no":14}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":96,"line_no":3,"col_no":15}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":100,"line_no":4,"col_no":4}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":106,"line_no":4,"col_no":10}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":107,"line_no":4,"col_no":11}}'
            - '{"type":"identifier","value":"code","pos":{"byte_no":111,"line_no":4,"col_no":15}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":112,"line_no":4,"col_no":16}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":116,"line_no":5,"col_no":4}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":122,"line_no":5,"col_no":10}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":123,"line_no":5,"col_no":11}}'
            - '{"type":"identifier","value":"description","pos":{"byte_no":134,"line_no":5,"col_no":22}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":135,"line_no":5,"col_no":23}}'
            - '{"type":"block-end","value":"}","pos":{"byte_no":136,"line_no":6,"col_no":1}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":137,"line_no":6,"col_no":2}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":138,"line_no":7,"col_no":1}}'
            - '{"type":"keyword","value":"namespace","pos":{"byte_no":147,"line_no":8,"col_no":9}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":148,"line_no":8,"col_no":10}}'
            - '{"type":"identifier","value":"System","pos":{"byte_no":154,"line_no":8,"col_no":16}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":155,"line_no":8,"col_no":17}}'
            - '{"type":"block-start","value":"{","pos":{"byte_no":156,"line_no":8,"col_no":18}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":157,"line_no":8,"col_no":19}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":161,"line_no":9,"col_no":4}}'
            - '{"type":"keyword","value":"rpc","pos":{"byte_no":164,"line_no":9,"col_no":7}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":165,"line_no":9,"col_no":8}}'
            - '{"type":"identifier","value":"Status","pos":{"byte_no":171,"line_no":9,"col_no":14}}'
            - '{"type":"arg-list-start","value":"(","pos":{"byte_no":172,"line_no":9,"col_no":15}}'
            - '{"type":"arg-list-end","value":")","pos":{"byte_no":173,"line_no":9,"col_no":16}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":174,"line_no":9,"col_no":17}}'
            - '{"type":"identifier","value":"Failure","pos":{"byte_no":181,"line_no":9,"col_no":24}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":182,"line_no":9,"col_no":25}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":183,"line_no":10,"col_no":1}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":187,"line_no":11,"col_no":4}}'
            - '{"type":"keyword","value":"namespace","pos":{"byte_no":196,"line_no":11,"col_no":13}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":197,"line_no":11,"col_no":14}}'
            - '{"type":"identifier","value":"Auth","pos":{"byte_no":201,"line_no":11,"col_no":18}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":202,"line_no":11,"col_no":19}}'
            - '{"type":"block-start","value":"{","pos":{"byte_no":203,"line_no":11,"col_no":20}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":204,"line_no":11,"col_no":21}}'
            - '{"type":"whitespace","value":"        ","pos":{"byte_no":212,"line_no":12,"col_no":8}}'
            - '{"type":"keyword","value":"type","pos":{"byte_no":216,"line_no":12,"col_no":12}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":217,"line_no":12,"col_no":13}}'
            - '{"type":"identifier","value":"User","pos":{"byte_no":221,"line_no":12,"col_no":17}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":222,"line_no":12,"col_no":18}}'
            - '{"type":"block-start","value":"{","pos":{"byte_no":223,"line_no":12,"col_no":19}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":224,"line_no":12,"col_no":20}}'
            - '{"type":"whitespace","value":"            ","pos":{"byte_no":236,"line_no":13,"col_no":12}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":242,"line_no":13,"col_no":18}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":243,"line_no":13,"col_no":19}}'
            - '{"type":"identifier","value":"username","pos":{"byte_no":251,"line_no":13,"col_no":27}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":252,"line_no":13,"col_no":28}}'
            - '{"type":"whitespace","value":"            ","pos":{"byte_no":264,"line_no":14,"col_no":12}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":270,"line_no":14,"col_no":18}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":271,"line_no":14,"col_no":19}}'
            - '{"type":"identifier","value":"email","pos":{"byte_no":276,"line_no":14,"col_no":24}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":277,"line_no":14,"col_no":25}}'
            - '{"type":"whitespace","value":"            ","pos":{"byte_no":289,"line_no":15,"col_no":12}}'
            - '{"type":"keyword","value":"map","pos":{"byte_no":292,"line_no":15,"col_no":15}}'
            - '{"type":"type-arg-list-start","value":"\u003c","pos":{"byte_no":293,"line_no":15,"col_no":16}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":299,"line_no":15,"col_no":22}}'
            - '{"type":"arg-list-sep","value":",","pos":{"byte_no":300,"line_no":15,"col_no":23}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":301,"line_no":15,"col_no":24}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":307,"line_no":15,"col_no":30}}'
            - '{"type":"type-arg-list-end","value":"\u003e","pos":{"byte_no":308,"line_no":15,"col_no":31}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":309,"line_no":15,"col_no":32}}'
            - '{"type":"identifier","value":"metadata","pos":{"byte_no":317,"line_no":15,"col_no":40}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":318,"line_no":15,"col_no":41}}'
            - '{"type":"whitespace","value":"        ","pos":{"byte_no":326,"line_no":16,"col_no":8}}'
            - '{"type":"block-end","value":"}","pos":{"byte_no":327,"line_no":16,"col_no":9}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":328,"line_no":16,"col_no":10}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":329,"line_no":17,"col_no":1}}'
            - '{"type":"whitespace","value":"        ","pos":{"byte_no":337,"line_no":18,"col_no":8}}'
            - '{"type":"keyword","value":"type","pos":{"byte_no":341,"line_no":18,"col_no":12}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":342,"line_no":18,"col_no":13}}'
            - '{"type":"identifier","value":"AuthRequest","pos":{"byte_no":353,"line_no":18,"col_no":24}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":354,"line_no":18,"col_no":25}}'
            - '{"type":"block-start","value":"{","pos":{"byte_no":355,"line_no":18,"col_no":26}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":356,"line_no":18,"col_no":27}}'
            - '{"type":"whitespace","value":"            ","pos":{"byte_no":368,"line_no":19,"col_no":12}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":374,"line_no":19,"col_no":18}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":375,"line_no":19,"col_no":19}}'
            - '{"type":"identifier","value":"provider","pos":{"byte_no":383,"line_no":19,"col_no":27}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":384,"line_no":19,"col_no":28}}'
            - '{"type":"whitespace","value":"            ","pos":{"byte_no":396,"line_no":20,"col_no":12}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":402,"line_no":20,"col_no":18}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":403,"line_no":20,"col_no":19}}'
            - '{"type":"identifier","value":"username","pos":{"byte_no":411,"line_no":20,"col_no":27}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":412,"line_no":20,"col_no":28}}'
            - '{"type":"whitespace","value":"            ","pos":{"byte_no":424,"line_no":21,"col_no":12}}'
            - '{"type":"keyword","value":"data","pos":{"byte_no":428,"line_no":21,"col_no":16}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":429,"line_no":21,"col_no":17}}'
            - '{"type":"identifier","value":"authData","pos":{"byte_no":437,"line_no":21,"col_no":25}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":438,"line_no":21,"col_no":26}}'
            - '{"type":"whitespace","value":"        ","pos":{"byte_no":446,"line_no":22,"col_no":8}}'
            - '{"type":"block-end","value":"}","pos":{"byte_no":447,"line_no":22,"col_no":9}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":448,"line_no":22,"col_no":10}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":449,"line_no":23,"col_no":1}}'
            - '{"type":"whitespace","value":"        ","pos":{"byte_no":457,"line_no":24,"col_no":8}}'
            - '{"type":"keyword","value":"type","pos":{"byte_no":461,"line_no":24,"col_no":12}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":462,"line_no":24,"col_no":13}}'
            - '{"type":"identifier","value":"AuthResponse","pos":{"byte_no":474,"line_no":24,"col_no":25}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":475,"line_no":24,"col_no":26}}'
            - '{"type":"block-start","value":"{","pos":{"byte_no":476,"line_no":24,"col_no":27}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":477,"line_no":24,"col_no":28}}'
            - '{"type":"whitespace","value":"            ","pos":{"byte_no":489,"line_no":25,"col_no":12}}'
            - '{"type":"identifier","value":"Failure","pos":{"byte_no":496,"line_no":25,"col_no":19}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":497,"line_no":25,"col_no":20}}'
            - '{"type":"identifier","value":"failure","pos":{"byte_no":504,"line_no":25,"col_no":27}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":505,"line_no":25,"col_no":28}}'
            - '{"type":"whitespace","value":"            ","pos":{"byte_no":517,"line_no":26,"col_no":12}}'
            - '{"type":"identifier","value":"User","pos":{"byte_no":521,"line_no":26,"col_no":16}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":522,"line_no":26,"col_no":17}}'
            - '{"type":"identifier","value":"user","pos":{"byte_no":526,"line_no":26,"col_no":21}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":527,"line_no":26,"col_no":22}}'
            - '{"type":"whitespace","value":"        ","pos":{"byte_no":535,"line_no":27,"col_no":8}}'
            - '{"type":"block-end","value":"}","pos":{"byte_no":536,"line_no":27,"col_no":9}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":537,"line_no":27,"col_no":10}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":541,"line_no":28,"col_no":4}}'
            - '{"type":"block-end","value":"}","pos":{"byte_no":542,"line_no":28,"col_no":5}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":543,"line_no":28,"col_no":6}}'
            - '{"type":"block-end","value":"}","pos":{"byte_no":544,"line_no":29,"col_no":1}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":545,"line_no":29,"col_no":2}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":546,"line_no":30,"col_no":1}}'
            - '{"type":"keyword","value":"namespace","pos":{"byte_no":555,"line_no":31,"col_no":9}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":556,"line_no":31,"col_no":10}}'
            - '{"type":"identifier","value":"Todos","pos":{"byte_no":561,"line_no":31,"col_no":15}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":562,"line_no":31,"col_no":16}}'
            - '{"type":"block-start","value":"{","pos":{"byte_no":563,"line_no":31,"col_no":17}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":564,"line_no":31,"col_no":18}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":568,"line_no":32,"col_no":4}}'
            - '{"type":"keyword","value":"type","pos":{"byte_no":572,"line_no":32,"col_no":8}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":573,"line_no":32,"col_no":9}}'
            - '{"type":"identifier","value":"Item","pos":{"byte_no":577,"line_no":32,"col_no":13}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":578,"line_no":32,"col_no":14}}'
            - '{"type":"block-start","value":"{","pos":{"byte_no":579,"line_no":32,"col_no":15}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":580,"line_no":32,"col_no":16}}'
            - '{"type":"whitespace","value":"        ","pos":{"byte_no":588,"line_no":33,"col_no":8}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":594,"line_no":33,"col_no":14}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":595,"line_no":33,"col_no":15}}'
            - '{"type":"identifier","value":"id","pos":{"byte_no":597,"line_no":33,"col_no":17}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":598,"line_no":33,"col_no":18}}'
            - '{"type":"whitespace","value":"        ","pos":{"byte_no":606,"line_no":34,"col_no":8}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":612,"line_no":34,"col_no":14}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":613,"line_no":34,"col_no":15}}'
            - '{"type":"identifier","value":"description","pos":{"byte_no":624,"line_no":34,"col_no":26}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":625,"line_no":34,"col_no":27}}'
            - '{"type":"whitespace","value":"        ","pos":{"byte_no":633,"line_no":35,"col_no":8}}'
            - '{"type":"keyword","value":"time","pos":{"byte_no":637,"line_no":35,"col_no":12}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":638,"line_no":35,"col_no":13}}'
            - '{"type":"identifier","value":"ctime","pos":{"byte_no":643,"line_no":35,"col_no":18}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":644,"line_no":35,"col_no":19}}'
            - '{"type":"whitespace","value":"        ","pos":{"byte_no":652,"line_no":36,"col_no":8}}'
            - '{"type":"keyword","value":"bool","pos":{"byte_no":656,"line_no":36,"col_no":12}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":657,"line_no":36,"col_no":13}}'
            - '{"type":"identifier","value":"completed","pos":{"byte_no":666,"line_no":36,"col_no":22}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":667,"line_no":36,"col_no":23}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":671,"line_no":37,"col_no":4}}'
            - '{"type":"block-end","value":"}","pos":{"byte_no":672,"line_no":37,"col_no":5}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":673,"line_no":37,"col_no":6}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":674,"line_no":38,"col_no":1}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":678,"line_no":39,"col_no":4}}'
            - '{"type":"keyword","value":"rpc","pos":{"byte_no":681,"line_no":39,"col_no":7}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":682,"line_no":39,"col_no":8}}'
            - '{"type":"identifier","value":"List","pos":{"byte_no":686,"line_no":39,"col_no":12}}'
            - '{"type":"arg-list-start","value":"(","pos":{"byte_no":687,"line_no":39,"col_no":13}}'
            - '{"type":"arg-list-end","value":")","pos":{"byte_no":688,"line_no":39,"col_no":14}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":689,"line_no":39,"col_no":15}}'
            - '{"type":"keyword","value":"list","pos":{"byte_no":693,"line_no":39,"col_no":19}}'
            - '{"type":"type-arg-list-start","value":"\u003c","pos":{"byte_no":694,"line_no":39,"col_no":20}}'
            - '{"type":"identifier","value":"Item","pos":{"byte_no":698,"line_no":39,"col_no":24}}'
            - '{"type":"type-arg-list-end","value":"\u003e","pos":{"byte_no":699,"line_no":39,"col_no":25}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":700,"line_no":39,"col_no":26}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":704,"line_no":40,"col_no":4}}'
            - '{"type":"keyword","value":"rpc","pos":{"byte_no":707,"line_no":40,"col_no":7}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":708,"line_no":40,"col_no":8}}'
            - '{"type":"identifier","value":"Get","pos":{"byte_no":711,"line_no":40,"col_no":11}}'
            - '{"type":"arg-list-start","value":"(","pos":{"byte_no":712,"line_no":40,"col_no":12}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":718,"line_no":40,"col_no":18}}'
            - '{"type":"arg-list-end","value":")","pos":{"byte_no":719,"line_no":40,"col_no":19}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":720,"line_no":40,"col_no":20}}'
            - '{"type":"identifier","value":"Item","pos":{"byte_no":724,"line_no":40,"col_no":24}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":725,"line_no":40,"col_no":25}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":729,"line_no":41,"col_no":4}}'
            - '{"type":"keyword","value":"rpc","pos":{"byte_no":732,"line_no":41,"col_no":7}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":733,"line_no":41,"col_no":8}}'
            - '{"type":"identifier","value":"Put","pos":{"byte_no":736,"line_no":41,"col_no":11}}'
            - '{"type":"arg-list-start","value":"(","pos":{"byte_no":737,"line_no":41,"col_no":12}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":743,"line_no":41,"col_no":18}}'
            - '{"type":"arg-list-end","value":")","pos":{"byte_no":744,"line_no":41,"col_no":19}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":745,"line_no":41,"col_no":20}}'
            - '{"type":"identifier","value":"Item","pos":{"byte_no":749,"line_no":41,"col_no":24}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":750,"line_no":41,"col_no":25}}'
            - '{"type":"whitespace","value":"    ","pos":{"byte_no":754,"line_no":42,"col_no":4}}'
            - '{"type":"keyword","value":"rpc","pos":{"byte_no":757,"line_no":42,"col_no":7}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":758,"line_no":42,"col_no":8}}'
            - '{"type":"identifier","value":"Delete","pos":{"byte_no":764,"line_no":42,"col_no":14}}'
            - '{"type":"arg-list-start","value":"(","pos":{"byte_no":765,"line_no":42,"col_no":15}}'
            - '{"type":"keyword","value":"string","pos":{"byte_no":771,"line_no":42,"col_no":21}}'
            - '{"type":"arg-list-end","value":")","pos":{"byte_no":772,"line_no":42,"col_no":22}}'
            - '{"type":"whitespace","value":" ","pos":{"byte_no":773,"line_no":42,"col_no":23}}'
            - '{"type":"identifier","value":"Item","pos":{"byte_no":777,"line_no":42,"col_no":27}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":778,"line_no":42,"col_no":28}}'
            - '{"type":"block-end","value":"}","pos":{"byte_no":779,"line_no":43,"col_no":1}}'
            - '{"type":"end-of-line","value":"\n","pos":{"byte_no":780,"line_no":43,"col_no":2}}'
            - '{"type":"end-of-file","value":"","pos":{"byte_no":780,"line_no":44,"col_no":0}}'
        - name: stderr
          data:
            - ""
- name: ./smoketests.yml \ Basics \ Parse
  commands:
    - command: $(go env GOPATH)/bin/rpc -parse todo-simple.rpc
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - '{'
            - '  "name": "root",'
            - '  "children": null,'
            - '  "options": {'
            - '    "encoding": "json",'
            - '    "go_package": "minitodo",'
            - '    "ruby_module": "minitodo",'
            - '    "transport": "http"'
            - '  },'
            - '  "types": {'
            - '    "Failure": {'
            - '      "name": "Failure",'
            - '      "properties": {'
            - '        "code": {'
            - '          "name": "code",'
            - '          "type": {'
            - '            "name": "string",'
            - '            "arguments": null'
            - '          }'
            - '        },'
            - '        "description": {'
            - '          "name": "description",'
            - '          "type": {'
            - '            "name": "string",'
            - '            "arguments": null'
            - '          }'
            - '        }'
            - '      }'
            - '    },'
            - '    "TodoItem": {'
            - '      "name": "TodoItem",'
            - '      "properties": {'
            - '        "completed": {'
            - '          "name": "completed",'
            - '          "type": {'
            - '            "name": "bool",'
            - '            "arguments": null'
            - '          }'
            - '        },'
            - '        "ctime": {'
            - '          "name": "ctime",'
            - '          "type": {'
            - '            "name": "time",'
            - '            "arguments": null'
            - '          }'
            - '        },'
            - '        "description": {'
            - '          "name": "description",'
            - '          "type": {'
            - '            "name": "string",'
            - '            "arguments": null'
            - '          }'
            - '        },'
            - '        "metadata": {'
            - '          "name": "metadata",'
            - '          "type": {'
            - '            "name": "data",'
            - '            "arguments": null'
            - '          }'
            - '        },'
            - '        "uuid": {'
            - '          "name": "uuid",'
            - '          "type": {'
            - '            "name": "string",'
            - '            "arguments": null'
            - '          }'
            - '        }'
            - '      }'
            - '    }'
            - '  },'
            - '  "rpcs": {'
            - '    "Delete": {'
            - '      "name": "Delete",'
            - '      "input": ['
            - '        {'
            - '          "name": "string",'
            - '          "arguments": null'
            - '        }'
            - '      ],'
            - '      "output": ['
            - '        {'
            - '          "name": "TodoItem",'
            - '          "arguments": null'
            - '        }'
            - '      ]'
            - '    },'
            - '    "Get": {'
            - '      "name": "Get",'
            - '      "input": ['
            - '        {'
            - '          "name": "string",'
            - '          "arguments": null'
            - '        }'
            - '      ],'
            - '      "output": ['
            - '        {'
            - '          "name": "TodoItem",'
            - '          "arguments": null'
            - '        }'
            - '      ]'
            - '    },'
            - '    "List": {'
            - '      "name": "List",'
            - '      "input": null,'
            - '      "output": ['
            - '        {'
            - '          "name": "list",'
            - '          "arguments": ['
            - '            {'
            - '              "name": "TodoItem",'
            - '              "arguments": null'
            - '            }'
            - '          ]'
            - '        }'
            - '      ]'
            - '    },'
            - '    "Put": {'
            - '      "name": "Put",'
            - '      "input": ['
            - '        {'
            - '          "name": "TodoItem",'
            - '          "arguments": null'
            - '        }'
            - '      ],'
            - '      "output": ['
            - '        {'
            - '          "name": "TodoItem",'
            - '          "arguments": null'
            - '        }'
            - '      ]'
            - '    }'
            - '  }'
            - '}'
        - name: stderr
          data:
            - ""
    - command: $(go env GOPATH)/bin/rpc -parse todo-complex.rpc
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - '{'
            - '  "name": "root",'
            - '  "children": {'
            - '    "System": {'
            - '      "name": "System",'
            - '      "children": {'
            - '        "Auth": {'
            - '          "name": "Auth",'
            - '          "children": null,'
            - '          "options": null,'
            - '          "types": {'
            - '            "AuthRequest": {'
            - '              "name": "AuthRequest",'
            - '              "properties": {'
            - '                "authData": {'
            - '                  "name": "authData",'
            - '                  "type": {'
            - '                    "name": "data",'
            - '                    "arguments": null'
            - '                  }'
            - '                },'
            - '                "provider": {'
            - '                  "name": "provider",'
            - '                  "type": {'
            - '                    "name": "string",'
            - '                    "arguments": null'
            - '                  }'
            - '                },'
            - '                "username": {'
            - '                  "name": "username",'
            - '                  "type": {'
            - '                    "name": "string",'
            - '                    "arguments": null'
            - '                  }'
            - '                }'
            - '              }'
            - '            },'
            - '            "AuthResponse": {'
            - '              "name": "AuthResponse",'
            - '              "properties": {'
            - '                "failure": {'
            - '                  "name": "failure",'
            - '                  "type": {'
            - '                    "name": "Failure",'
            - '                    "arguments": null'
            - '                  }'
            - '                },'
            - '                "user": {'
            - '                  "name": "user",'
            - '                  "type": {'
            - '                    "name": "User",'
            - '                    "arguments": null'
            - '                  }'
            - '                }'
            - '              }'
            - '            },'
            - '            "User": {'
            - '              "name": "User",'
            - '              "properties": {'
            - '                "email": {'
            - '                  "name": "email",'
            - '                  "type": {'
            - '                    "name": "string",'
            - '                    "arguments": null'
            - '                  }'
            - '                },'
            - '                "metadata": {'
            - '                  "name": "metadata",'
            - '                  "type": {'
            - '                    "name": "map",'
            - '                    "arguments": ['
            - '                      {'
            - '                        "name": "string",'
            - '                        "arguments": null'
            - '                      },'
            - '                      {'
            - '                        "name": "string",'
            - '                        "arguments": null'
            - '                      }'
            - '                    ]'
            - '                  }'
            - '                },'
            - '                "username": {'
            - '                  "name": "username",'
            - '                  "type": {'
            - '                    "name": "string",'
            - '                    "arguments": null'
            - '                  }'
            - '                }'
            - '              }'
            - '            }'
            - '          },'
            - '          "rpcs": null'
            - '        }'
            - '      },'
            - '      "options": null,'
            - '      "types": null,'
            - '      "rpcs": {'
            - '        "Status": {'
            - '          "name": "Status",'
            - '          "input": null,'
            - '          "output": ['
            - '            {'
            - '              "name": "Failure",'
            - '              "arguments": null'
            - '            }'
            - '          ]'
            - '        }'
            - '      }'
            - '    },'
            - '    "Todos": {'
            - '      "name": "Todos",'
            - '      "children": null,'
            - '      "options": null,'
            - '      "types": {'
            - '        "Item": {'
            - '          "name": "Item",'
            - '          "properties": {'
            - '            "completed": {'
            - '              "name": "completed",'
            - '              "type": {'
            - '                "name": "bool",'
            - '                "arguments": null'
            - '              }'
            - '            },'
            - '            "ctime": {'
            - '              "name": "ctime",'
            - '              "type": {'
            - '                "name": "time",'
            - '                "arguments": null'
            - '              }'
            - '            },'
            - '            "description": {'
            - '              "name": "description",'
            - '              "type": {'
            - '                "name": "string",'
            - '                "arguments": null'
            - '              }'
            - '            },'
            - '            "id": {'
            - '              "name": "id",'
            - '              "type": {'
            - '                "name": "string",'
            - '                "arguments": null'
            - '              }'
            - '            }'
            - '          }'
            - '        }'
            - '      },'
            - '      "rpcs": {'
            - '        "Delete": {'
            - '          "name": "Delete",'
            - '          "input": ['
            - '            {'
            - '              "name": "string",'
            - '              "arguments": null'
            - '            }'
            - '          ],'
            - '          "output": ['
            - '            {'
            - '              "name": "Item",'
            - '              "arguments": null'
            - '            }'
            - '          ]'
            - '        },'
            - '        "Get": {'
            - '          "name": "Get",'
            - '          "input": ['
            - '            {'
            - '              "name": "string",'
            - '              "arguments": null'
            - '            }'
            - '          ],'
            - '          "output": ['
            - '            {'
            - '              "name": "Item",'
            - '              "arguments": null'
            - '            }'
            - '          ]'
            - '        },'
            - '        "List": {'
            - '          "name": "List",'
            - '          "input": null,'
            - '          "output": ['
            - '            {'
            - '              "name": "list",'
            - '              "arguments": ['
            - '                {'
            - '                  "name": "Item",'
            - '                  "arguments": null'
            - '                }'
            - '              ]'
            - '            }'
            - '          ]'
            - '        },'
            - '        "Put": {'
            - '          "name": "Put",'
            - '          "input": ['
            - '            {'
            - '              "name": "string",'
            - '              "arguments": null'
            - '            }'
            - '          ],'
            - '          "output": ['
            - '            {'
            - '              "name": "Item",'
            - '              "arguments": null'
            - '            }'
            - '          ]'
            - '        }'
            - '      }'
            - '    }'
            - '  },'
            - '  "options": {'
            - '    "go_import": "github.com/chakrit/rpc/examples",'
            - '    "go_package": "examples"'
            - '  },'
            - '  "types": {'
            - '    "Failure": {'
            - '      "name": "Failure",'
            - '      "properties": {'
            - '        "code": {'
            - '          "name": "code",'
            - '          "type": {'
            - '            "name": "string",'
            - '            "arguments": null'
            - '          }'
            - '        },'
            - '        "description": {'
            - '          "name": "description",'
            - '          "type": {'
            - '            "name": "string",'
            - '            "arguments": null'
            - '          }'
            - '        }'
            - '      }'
            - '    }'
            - '  },'
            - '  "rpcs": null'
            - '}'
        - name: stderr
          data:
            - ""
- name: ./smoketests.yml \ Generators \ Elm
  commands:
    - command: $(go env GOPATH)/bin/rpc -gen elm -out /tmp/rpc/elm todo-simple.rpc
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - ""
        - name: stderr
          data:
            - ""
    - command: find /tmp/rpc/elm -name *.elm
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - /tmp/rpc/elm/Rpc.elm
            - /tmp/rpc/elm/RpcUtil.elm
        - name: stderr
          data:
            - ""
    - command: find /tmp/rpc/elm -name *.elm | xargs cat
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - module Rpc exposing (..)
            - ""
            - import Http
            - import Json.Decode as D
            - import Json.Encode as E
            - import Time
            - import RpcUtil exposing (Config, CallResult, unwrapHttpResult, decodeCallResult)
            - ""
            - ""
            - ""
            - type alias Failure =
            - '    { code : String'
            - '    , description : String'
            - '    }'
            - ""
            - 'encodeFailure : Failure -> E.Value'
            - encodeFailure obj =
            - '    E.object'
            - '        [ ( "code", E.string obj.code )'
            - '        , ( "description", E.string obj.description )'
            - '        ]'
            - ""
            - 'decodeFailure : D.Decoder Failure'
            - decodeFailure =
            - '    D.map2 Failure'
            - '            (D.field "code" (D.string))'
            - '            (D.field "description" (D.string))'
            - '    '
            - ""
            - type alias TodoItem =
            - '    { completed : Bool'
            - '    , ctime : Time.Posix'
            - '    , description : String'
            - '    , metadata : ()'
            - '    , uuid : String'
            - '    }'
            - ""
            - 'encodeTodoItem : TodoItem -> E.Value'
            - encodeTodoItem obj =
            - '    E.object'
            - '        [ ( "completed", E.bool obj.completed )'
            - '        , ( "ctime", (Time.posixToMillis >> toFloat >> (\f -> f/1000.0)
              >> E.float) obj.ctime )'
            - '        , ( "description", E.string obj.description )'
            - '        , ( "metadata", (\_ -> E.null) obj.metadata )'
            - '        , ( "uuid", E.string obj.uuid )'
            - '        ]'
            - ""
            - 'decodeTodoItem : D.Decoder TodoItem'
            - decodeTodoItem =
            - '    D.map5 TodoItem'
            - '            (D.field "completed" (D.bool))'
            - '            (D.field "ctime" ((D.map ((\f -> f * 1000.0) >> round >>
              Time.millisToPosix) D.float)))'
            - '            (D.field "description" (D.string))'
            - '            (D.field "metadata" ((D.succeed ())))'
            - '            (D.field "uuid" (D.string))'
            - '    '
            - ""
            - ""
            - ""
            - type alias InputForDelete =
            - '    (String)'
            - ""
            - 'encodeInputForDelete : InputForDelete -> E.Value'
            - encodeInputForDelete
            - '    (arg0) ='
            - '        E.list (identity)'
            - '            [ E.string arg0'
            - '            ]'
            - ""
            - 'decodeInputForDelete : D.Decoder InputForDelete'
            - decodeInputForDelete =
            - '        D.map (\a -> (a))'
            - '            (D.index 0 (D.string))'
            - ""
            - type alias OutputForDelete =
            - '    (TodoItem)'
            - ""
            - 'encodeOutputForDelete : OutputForDelete -> E.Value'
            - encodeOutputForDelete
            - '    (arg0) ='
            - '        E.list (identity)'
            - '            [ encodeTodoItem arg0'
            - '            ]'
            - ""
            - 'decodeOutputForDelete : D.Decoder OutputForDelete'
            - decodeOutputForDelete =
            - '        D.map (\a -> (a))'
            - '            (D.index 0 (decodeTodoItem))'
            - ""
            - type alias InputForGet =
            - '    (String)'
            - ""
            - 'encodeInputForGet : InputForGet -> E.Value'
            - encodeInputForGet
            - '    (arg0) ='
            - '        E.list (identity)'
            - '            [ E.string arg0'
            - '            ]'
            - ""
            - 'decodeInputForGet : D.Decoder InputForGet'
            - decodeInputForGet =
            - '        D.map (\a -> (a))'
            - '            (D.index 0 (D.string))'
            - ""
            - type alias OutputForGet =
            - '    (TodoItem)'
            - ""
            - 'encodeOutputForGet : OutputForGet -> E.Value'
            - encodeOutputForGet
            - '    (arg0) ='
            - '        E.list (identity)'
            - '            [ encodeTodoItem arg0'
            - '            ]'
            - ""
            - 'decodeOutputForGet : D.Decoder OutputForGet'
            - decodeOutputForGet =
            - '        D.map (\a -> (a))'
            - '            (D.index 0 (decodeTodoItem))'
            - ""
            - type alias InputForList =
            - '    (())'
            - ""
            - 'encodeInputForList : InputForList -> E.Value'
            - encodeInputForList
            - '    () ='
            - '        E.list (identity)'
            - '            ['
            - '            ]'
            - ""
            - 'decodeInputForList : D.Decoder InputForList'
            - decodeInputForList =
            - '        D.succeed ()'
            - ""
            - type alias OutputForList =
            - '    (List (TodoItem))'
            - ""
            - 'encodeOutputForList : OutputForList -> E.Value'
            - encodeOutputForList
            - '    (arg0) ='
            - '        E.list (identity)'
            - '            [ E.list (encodeTodoItem) arg0'
            - '            ]'
            - ""
            - 'decodeOutputForList : D.Decoder OutputForList'
            - decodeOutputForList =
            - '        D.map (\a -> (a))'
            - '            (D.index 0 (D.map (Maybe.withDefault ([])) (D.maybe (D.list
              (decodeTodoItem)))))'
            - ""
            - type alias InputForPut =
            - '    (TodoItem)'
            - ""
            - 'encodeInputForPut : InputForPut -> E.Value'
            - encodeInputForPut
            - '    (arg0) ='
            - '        E.list (identity)'
            - '            [ encodeTodoItem arg0'
            - '            ]'
            - ""
            - 'decodeInputForPut : D.Decoder InputForPut'
            - decodeInputForPut =
            - '        D.map (\a -> (a))'
            - '            (D.index 0 (decodeTodoItem))'
            - ""
            - type alias OutputForPut =
            - '    (TodoItem)'
            - ""
            - 'encodeOutputForPut : OutputForPut -> E.Value'
            - encodeOutputForPut
            - '    (arg0) ='
            - '        E.list (identity)'
            - '            [ encodeTodoItem arg0'
            - '            ]'
            - ""
            - 'decodeOutputForPut : D.Decoder OutputForPut'
            - decodeOutputForPut =
            - '        D.map (\a -> (a))'
            - '            (D.index 0 (decodeTodoItem))'
            - ""
            - ""
            - ""
            - 'callDelete : Config -> InputForDelete -> (CallResult OutputForDelete
              -> a) -> Cmd a'
            - callDelete config input mapResult =
            - '    let'
            - '        body = Http.jsonBody (encodeInputForDelete input)'
            - '        expect = Http.expectJson (unwrapHttpResult >> mapResult) (decodeCallResult
              decodeOutputForDelete)'
            - '    in'
            - '    Http.request'
            - '        { method = "POST"'
            - '        , headers = config.headers'
            - '        , url = config.baseUrl ++ "/rpc/Delete"'
            - '        , body = body'
            - '        , expect = expect'
            - '        , timeout = Nothing'
            - '        , tracker = Nothing'
            - '        }'
            - ""
            - 'callGet : Config -> InputForGet -> (CallResult OutputForGet -> a) ->
              Cmd a'
            - callGet config input mapResult =
            - '    let'
            - '        body = Http.jsonBody (encodeInputForGet input)'
            - '        expect = Http.expectJson (unwrapHttpResult >> mapResult) (decodeCallResult
              decodeOutputForGet)'
            - '    in'
            - '    Http.request'
            - '        { method = "POST"'
            - '        , headers = config.headers'
            - '        , url = config.baseUrl ++ "/rpc/Get"'
            - '        , body = body'
            - '        , expect = expect'
            - '        , timeout = Nothing'
            - '        , tracker = Nothing'
            - '        }'
            - ""
            - 'callList : Config -> InputForList -> (CallResult OutputForList -> a)
              -> Cmd a'
            - callList config input mapResult =
            - '    let'
            - '        body = Http.jsonBody (encodeInputForList input)'
            - '        expect = Http.expectJson (unwrapHttpResult >> mapResult) (decodeCallResult
              decodeOutputForList)'
            - '    in'
            - '    Http.request'
            - '        { method = "POST"'
            - '        , headers = config.headers'
            - '        , url = config.baseUrl ++ "/rpc/List"'
            - '        , body = body'
            - '        , expect = expect'
            - '        , timeout = Nothing'
            - '        , tracker = Nothing'
            - '        }'
            - ""
            - 'callPut : Config -> InputForPut -> (CallResult OutputForPut -> a) ->
              Cmd a'
            - callPut config input mapResult =
            - '    let'
            - '        body = Http.jsonBody (encodeInputForPut input)'
            - '        expect = Http.expectJson (unwrapHttpResult >> mapResult) (decodeCallResult
              decodeOutputForPut)'
            - '    in'
            - '    Http.request'
            - '        { method = "POST"'
            - '        , headers = config.headers'
            - '        , url = config.baseUrl ++ "/rpc/Put"'
            - '        , body = body'
            - '        , expect = expect'
            - '        , timeout = Nothing'
            - '        , tracker = Nothing'
            - '        }'
            - module RpcUtil exposing (..)
            - ""
            - import Array exposing (Array)
            - import Http exposing (Error(..))
            - import Json.Decode as D
            - ""
            - ""
            - type alias Config =
            - '    { baseUrl : String'
            - '    , headers : List Http.Header'
            - '    }'
            - ""
            - ""
            - 'decodeConfig : D.Decoder Config'
            - decodeConfig =
            - '    let'
            - '        mapHeader : Array String -> Http.Header'
            - '        mapHeader arr ='
            - '            let'
            - '                header ='
            - '                    Array.get 0 arr |> Maybe.withDefault ""'
            - ""
            - '                content ='
            - '                    Array.get 1 arr |> Maybe.withDefault ""'
            - '            in'
            - '            Http.header header content'
            - ""
            - '        mapHeaderArray : Array (Array String) -> List Http.Header'
            - '        mapHeaderArray arr ='
            - '            arr |> Array.map mapHeader |> Array.toList'
            - '    in'
            - '    D.map2 Config'
            - '        (D.field "baseUrl" <| D.string)'
            - '        (D.field "headers" <| D.map mapHeaderArray (D.array (D.array
              D.string)))'
            - ""
            - ""
            - type CallResult a
            - '    = HttpError Http.Error'
            - '    | ApiError String'
            - '    | Success a'
            - ""
            - ""
            - 'translateHttpError : Http.Error -> String'
            - translateHttpError httpErr =
            - '    case httpErr of'
            - '        BadUrl str ->'
            - '            "Bad URL: " ++ str'
            - ""
            - '        Timeout ->'
            - '            "Network Timeout"'
            - ""
            - '        NetworkError ->'
            - '            "Network Error"'
            - ""
            - '        BadStatus code ->'
            - '            "Bad Status Code: " ++ String.fromInt code'
            - ""
            - '        BadBody str ->'
            - '            "Malformed Response: " ++ str'
            - ""
            - ""
            - 'mapResult : { onHttpErr : Http.Error -> msg, onApiErr : String -> msg,
              onSuccess : a -> msg } -> CallResult a -> msg'
            - mapResult mapper result =
            - '    case result of'
            - '        HttpError httpErr ->'
            - '            mapper.onHttpErr httpErr'
            - ""
            - '        ApiError err ->'
            - '            mapper.onApiErr err'
            - ""
            - '        Success obj ->'
            - '            mapper.onSuccess obj'
            - ""
            - ""
            - 'unwrapHttpResult : (Result Http.Error (CallResult a)) -> CallResult
              a'
            - unwrapHttpResult result =
            - '    case result of'
            - '        Ok callResult ->'
            - '            callResult'
            - ""
            - '        Err httpErr ->'
            - '            HttpError httpErr'
            - ""
            - ""
            - 'decodeCallResult : D.Decoder a -> D.Decoder (CallResult a)'
            - decodeCallResult decodeReturns =
            - '    let'
            - '        mapResultObj : Maybe String -> a -> CallResult a'
            - '        mapResultObj err ret ='
            - '            case err of'
            - '                Just str ->'
            - '                    ApiError str'
            - ""
            - '                Nothing ->'
            - '                    Success ret'
            - '    in'
            - '    D.map2 (mapResultObj)'
            - '        (D.field "error" (D.maybe D.string))'
            - '        (D.field "returns" decodeReturns)'
        - name: stderr
          data:
            - ""
- name: ./smoketests.yml \ Generators \ Go
  commands:
    - command: $(go env GOPATH)/bin/rpc -gen go  -out /tmp/rpc/go todo-simple.rpc
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - ""
        - name: stderr
          data:
            - ""
    - command: find /tmp/rpc/go -name *.go
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - /tmp/rpc/go/server/server.go
            - /tmp/rpc/go/rpc.go
            - /tmp/rpc/go/client/client.go
        - name: stderr
          data:
            - ""
    - command: find /tmp/rpc/elm -name *.go | xargs cat
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - // <auto-generated />
            - //
            - '// expected import: go.example.com/rpc/server'
            - package server
            - ""
            - import (
            - "\t\"encoding/json\""
            - "\t\"net/http\""
            - ""
            - "\trpc_root \"go.example.com/rpc\""
            - )
            - ""
            - type Handler_rpc_root struct {
            - "\tHandler rpc_root.Interface"
            - '}'
            - ""
            - type Result struct {
            - "\tError   error         `json:\"error\"`"
            - "\tReturns []interface{} `json:\"returns\"`"
            - '}'
            - ""
            - type Server struct {
            - "\tOptions"
            - "\tHandler_rpc_root"
            - '}'
            - ""
            - type Options struct {
            - "\tAddr string"
            - '}'
            - ""
            - func New(opts *Options) *Server {
            - "\treturn &Server{Options: *opts}"
            - '}'
            - ""
            - func (s *Server) Listen() error {
            - "\treturn http.ListenAndServe(s.Options.Addr, s.HTTPHandler())"
            - '}'
            - ""
            - func (s *Server) HTTPHandler() http.Handler {
            - "\tmux := http.NewServeMux()"
            - "\ts.register_rpc_root(mux, s.Handler_rpc_root)"
            - "\treturn mux"
            - '}'
            - ""
            - func (s *Server) register_rpc_root(
            - "\tmux *http.ServeMux,"
            - "\thandler Handler_rpc_root,"
            - ) *http.ServeMux {
            - ""
            - "\tmux.HandleFunc(\"/minitodo/Delete\", func(resp http.ResponseWriter,
              req *http.Request) {"
            - "\t\tvar err error"
            - "\t\tresp.Header().Set(\"Content-Type\", \"application/json\")"
            - ""
            - "\t\tvar arg0 string"
            - "\t\targs := [1]interface{}{"
            - "\t\t\t&arg0,"
            - "\t\t}"
            - ""
            - "\t\tif req.Body != nil {"
            - "\t\t\tif err := json.NewDecoder(req.Body).Decode(&args); err != nil
              {"
            - "\t\t\t\tresp.WriteHeader(400)"
            - "\t\t\t\trenderError(resp, err)"
            - "\t\t\t\treturn"
            - "\t\t\t}"
            - "\t\t}"
            - ""
            - "\t\tvar out0 *rpc_root.TodoItem"
            - "\t\tout0, err = handler.Handler.Delete("
            - "\t\t\treq.Context(), arg0)"
            - "\t\tresult := &Result{"
            - "\t\t\tError: err,"
            - "\t\t\tReturns: []interface{}{"
            - "\t\t\t\tout0,"
            - "\t\t\t},"
            - "\t\t}"
            - ""
            - "\t\tbytes, err := json.Marshal(result)"
            - "\t\tif err != nil {"
            - "\t\t\tresp.WriteHeader(500)"
            - "\t\t\trenderError(resp, err)"
            - "\t\t}"
            - ""
            - "\t\tresp.WriteHeader(200)"
            - "\t\t_, _ = resp.Write(bytes)"
            - "\t})"
            - ""
            - "\tmux.HandleFunc(\"/minitodo/Get\", func(resp http.ResponseWriter,
              req *http.Request) {"
            - "\t\tvar err error"
            - "\t\tresp.Header().Set(\"Content-Type\", \"application/json\")"
            - ""
            - "\t\tvar arg0 string"
            - "\t\targs := [1]interface{}{"
            - "\t\t\t&arg0,"
            - "\t\t}"
            - ""
            - "\t\tif req.Body != nil {"
            - "\t\t\tif err := json.NewDecoder(req.Body).Decode(&args); err != nil
              {"
            - "\t\t\t\tresp.WriteHeader(400)"
            - "\t\t\t\trenderError(resp, err)"
            - "\t\t\t\treturn"
            - "\t\t\t}"
            - "\t\t}"
            - ""
            - "\t\tvar out0 *rpc_root.TodoItem"
            - "\t\tout0, err = handler.Handler.Get("
            - "\t\t\treq.Context(), arg0)"
            - "\t\tresult := &Result{"
            - "\t\t\tError: err,"
            - "\t\t\tReturns: []interface{}{"
            - "\t\t\t\tout0,"
            - "\t\t\t},"
            - "\t\t}"
            - ""
            - "\t\tbytes, err := json.Marshal(result)"
            - "\t\tif err != nil {"
            - "\t\t\tresp.WriteHeader(500)"
            - "\t\t\trenderError(resp, err)"
            - "\t\t}"
            - ""
            - "\t\tresp.WriteHeader(200)"
            - "\t\t_, _ = resp.Write(bytes)"
            - "\t})"
            - ""
            - "\tmux.HandleFunc(\"/minitodo/List\", func(resp http.ResponseWriter,
              req *http.Request) {"
            - "\t\tvar err error"
            - "\t\tresp.Header().Set(\"Content-Type\", \"application/json\")"
            - ""
            - "\t\tvar out0 []*rpc_root.TodoItem"
            - "\t\tout0, err = handler.Handler.List("
            - "\t\t\treq.Context())"
            - "\t\tresult := &Result{"
            - "\t\t\tError: err,"
            - "\t\t\tReturns: []interface{}{"
            - "\t\t\t\tout0,"
            - "\t\t\t},"
            - "\t\t}"
            - ""
            - "\t\tbytes, err := json.Marshal(result)"
            - "\t\tif err != nil {"
            - "\t\t\tresp.WriteHeader(500)"
            - "\t\t\trenderError(resp, err)"
            - "\t\t}"
            - ""
            - "\t\tresp.WriteHeader(200)"
            - "\t\t_, _ = resp.Write(bytes)"
            - "\t})"
            - ""
            - "\tmux.HandleFunc(\"/minitodo/Put\", func(resp http.ResponseWriter,
              req *http.Request) {"
            - "\t\tvar err error"
            - "\t\tresp.Header().Set(\"Content-Type\", \"application/json\")"
            - ""
            - "\t\tvar arg0 *rpc_root.TodoItem"
            - "\t\targs := [1]interface{}{"
            - "\t\t\t&arg0,"
            - "\t\t}"
            - ""
            - "\t\tif req.Body != nil {"
            - "\t\t\tif err := json.NewDecoder(req.Body).Decode(&args); err != nil
              {"
            - "\t\t\t\tresp.WriteHeader(400)"
            - "\t\t\t\trenderError(resp, err)"
            - "\t\t\t\treturn"
            - "\t\t\t}"
            - "\t\t}"
            - ""
            - "\t\tvar out0 *rpc_root.TodoItem"
            - "\t\tout0, err = handler.Handler.Put("
            - "\t\t\treq.Context(), arg0)"
            - "\t\tresult := &Result{"
            - "\t\t\tError: err,"
            - "\t\t\tReturns: []interface{}{"
            - "\t\t\t\tout0,"
            - "\t\t\t},"
            - "\t\t}"
            - ""
            - "\t\tbytes, err := json.Marshal(result)"
            - "\t\tif err != nil {"
            - "\t\t\tresp.WriteHeader(500)"
            - "\t\t\trenderError(resp, err)"
            - "\t\t}"
            - ""
            - "\t\tresp.WriteHeader(200)"
            - "\t\t_, _ = resp.Write(bytes)"
            - "\t})"
            - ""
            - "\treturn mux"
            - '}'
            - ""
            - func renderError(resp http.ResponseWriter, e error) {
            - "\tresult := &Result{"
            - "\t\tError:   e,"
            - "\t\tReturns: nil,"
            - "\t}"
            - ""
            - "\tbytes, err := json.Marshal(result)"
            - "\tif err != nil {"
            - "\t\t_, _ = resp.Write([]byte(`{\"error\":\"json processing error\"}`))"
            - "\t} else {"
            - "\t\t_, _ = resp.Write(bytes)"
            - "\t}"
            - '}'
            - // <auto-generated />
            - //
            - '// expected import: go.example.com/rpc'
            - package minitodo
            - ""
            - import (
            - "\t\"context\""
            - "\t\"encoding/json\""
            - "\t\"math\""
            - ""
            - "\ttime \"time\""
            - )
            - ""
            - var (
            - "\t_ context.Context = nil"
            - "\t_                 = json.Marshal"
            - "\t_                 = math.Pi"
            - )
            - ""
            - type Failure struct {
            - "\tCode        string `json:\"code\" yaml:\"code\" db:\"code\"`"
            - "\tDescription string `json:\"description\" yaml:\"description\" db:\"description\"`"
            - '}'
            - ""
            - func (obj *Failure) MarshalJSON() ([]byte, error) {
            - "\toutobj := struct {"
            - "\t\tCode        string `json:\"code\"`"
            - "\t\tDescription string `json:\"description\"`"
            - "\t}{"
            - "\t\tCode:        (obj.Code),"
            - "\t\tDescription: (obj.Description),"
            - "\t}"
            - "\treturn json.Marshal(outobj)"
            - '}'
            - ""
            - func (obj *Failure) UnmarshalJSON(buf []byte) error {
            - "\tinobj := struct {"
            - "\t\tCode        string `json:\"code\"`"
            - "\t\tDescription string `json:\"description\"`"
            - "\t}{}"
            - ""
            - "\tif err := json.Unmarshal(buf, &inobj); err != nil {"
            - "\t\treturn err"
            - "\t}"
            - ""
            - "\tobj.Code = (inobj.Code)"
            - "\tobj.Description = (inobj.Description)"
            - "\treturn nil"
            - '}'
            - ""
            - type TodoItem struct {
            - "\tCompleted   bool      `json:\"completed\" yaml:\"completed\" db:\"completed\"`"
            - "\tCtime       time.Time `json:\"ctime\" yaml:\"ctime\" db:\"ctime\"`"
            - "\tDescription string    `json:\"description\" yaml:\"description\"
              db:\"description\"`"
            - "\tUuid        string    `json:\"uuid\" yaml:\"uuid\" db:\"uuid\"`"
            - '}'
            - ""
            - func (obj *TodoItem) MarshalJSON() ([]byte, error) {
            - "\toutobj := struct {"
            - "\t\tCompleted   bool    `json:\"completed\"`"
            - "\t\tCtime       float64 `json:\"ctime\"`"
            - "\t\tDescription string  `json:\"description\"`"
            - "\t\tUuid        string  `json:\"uuid\"`"
            - "\t}{"
            - "\t\tCompleted: (obj.Completed),"
            - "\t\tCtime: (func(t time.Time) float64 {"
            - "\t\t\tsec, nsec := t.Unix(), t.Nanosecond()"
            - "\t\t\treturn float64(sec) + (float64(nsec) / float64(time.Second))"
            - "\t\t})(obj.Ctime),"
            - "\t\tDescription: (obj.Description),"
            - "\t\tUuid:        (obj.Uuid),"
            - "\t}"
            - "\treturn json.Marshal(outobj)"
            - '}'
            - ""
            - func (obj *TodoItem) UnmarshalJSON(buf []byte) error {
            - "\tinobj := struct {"
            - "\t\tCompleted   bool    `json:\"completed\"`"
            - "\t\tCtime       float64 `json:\"ctime\"`"
            - "\t\tDescription string  `json:\"description\"`"
            - "\t\tUuid        string  `json:\"uuid\"`"
            - "\t}{}"
            - ""
            - "\tif err := json.Unmarshal(buf, &inobj); err != nil {"
            - "\t\treturn err"
            - "\t}"
            - ""
            - "\tobj.Completed = (inobj.Completed)"
            - "\tobj.Ctime = (func(t float64) time.Time {"
            - "\t\tfsec, fnsec := math.Modf(t)"
            - "\t\tsec, nsec := int64(fsec), int64(math.Round(fnsec*float64(time.Second)))"
            - "\t\treturn time.Unix(sec, nsec)"
            - "\t})(inobj.Ctime)"
            - "\tobj.Description = (inobj.Description)"
            - "\tobj.Uuid = (inobj.Uuid)"
            - "\treturn nil"
            - '}'
            - ""
            - type Interface interface {
            - "\tDelete(context.Context, string) (*TodoItem, error,"
            - "\t)"
            - "\tGet(context.Context, string) (*TodoItem, error,"
            - "\t)"
            - "\tList(context.Context) ([]*TodoItem, error,"
            - "\t)"
            - "\tPut(context.Context, *TodoItem) (*TodoItem, error,"
            - "\t)"
            - '}'
            - // <auto-generated />
            - //
            - '// expected import: go.example.com/rpc/client'
            - package client
            - ""
            - import (
            - "\t\"bytes\""
            - "\t\"context\""
            - "\t\"encoding/json\""
            - "\t\"net/http\""
            - "\t\"time\""
            - ""
            - "\trpc_root \"go.example.com/rpc\""
            - )
            - ""
            - var (
            - "\t_ context.Context = nil"
            - "\t_ time.Time       = time.Time{}"
            - )
            - ""
            - // go.example.com/rpc
            - var _ rpc_root.Interface = Client_rpc_root{}
            - ""
            - type Client_rpc_root struct {
            - "\t*Client"
            - '}'
            - ""
            - func (c *Client_rpc_root) initialize(client *Client) {
            - "\tc.Client = client"
            - '}'
            - ""
            - func (c Client_rpc_root) Delete(
            - "\tctx context.Context,"
            - "\targ0 string,"
            - ) (
            - "\tout0 *rpc_root.TodoItem,"
            - "\terr error,"
            - ) {
            - "\tpayload := []interface{}{arg0}"
            - ""
            - "\tbuf := &bytes.Buffer{}"
            - "\tif err = json.NewEncoder(buf).Encode(payload); err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\tvar req *http.Request"
            - "\treq, err = http.NewRequest(\"POST\", \"http://\"+c.Client.Options.Addr+\"/minitodo/Delete\",
              buf)"
            - "\tif err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\treq = req.WithContext(ctx)"
            - ""
            - "\tvar resp *http.Response"
            - "\tresp, err = c.HTTPClient.Do(req)"
            - "\tif err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\treturns := [1]interface{}{&out0}"
            - "\tresult := &Result{}"
            - "\tresult.Returns = returns[:]"
            - ""
            - "\tif resp.Body != nil {"
            - "\t\tdefer resp.Body.Close()"
            - ""
            - "\t\tif err = json.NewDecoder(resp.Body).Decode(result); err != nil
              {"
            - "\t\t\treturn"
            - "\t\t}"
            - "\t}"
            - ""
            - "\tif result.Error != nil {"
            - "\t\terr = result.Error"
            - "\t}"
            - "\treturn"
            - '}'
            - ""
            - func (c Client_rpc_root) Get(
            - "\tctx context.Context,"
            - "\targ0 string,"
            - ) (
            - "\tout0 *rpc_root.TodoItem,"
            - "\terr error,"
            - ) {
            - "\tpayload := []interface{}{arg0}"
            - ""
            - "\tbuf := &bytes.Buffer{}"
            - "\tif err = json.NewEncoder(buf).Encode(payload); err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\tvar req *http.Request"
            - "\treq, err = http.NewRequest(\"POST\", \"http://\"+c.Client.Options.Addr+\"/minitodo/Get\",
              buf)"
            - "\tif err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\treq = req.WithContext(ctx)"
            - ""
            - "\tvar resp *http.Response"
            - "\tresp, err = c.HTTPClient.Do(req)"
            - "\tif err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\treturns := [1]interface{}{&out0}"
            - "\tresult := &Result{}"
            - "\tresult.Returns = returns[:]"
            - ""
            - "\tif resp.Body != nil {"
            - "\t\tdefer resp.Body.Close()"
            - ""
            - "\t\tif err = json.NewDecoder(resp.Body).Decode(result); err != nil
              {"
            - "\t\t\treturn"
            - "\t\t}"
            - "\t}"
            - ""
            - "\tif result.Error != nil {"
            - "\t\terr = result.Error"
            - "\t}"
            - "\treturn"
            - '}'
            - ""
            - func (c Client_rpc_root) List(
            - "\tctx context.Context,"
            - ) (
            - "\tout0 []*rpc_root.TodoItem,"
            - "\terr error,"
            - ) {
            - "\tpayload := []interface{}{}"
            - ""
            - "\tbuf := &bytes.Buffer{}"
            - "\tif err = json.NewEncoder(buf).Encode(payload); err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\tvar req *http.Request"
            - "\treq, err = http.NewRequest(\"POST\", \"http://\"+c.Client.Options.Addr+\"/minitodo/List\",
              buf)"
            - "\tif err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\treq = req.WithContext(ctx)"
            - ""
            - "\tvar resp *http.Response"
            - "\tresp, err = c.HTTPClient.Do(req)"
            - "\tif err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\treturns := [1]interface{}{&out0}"
            - "\tresult := &Result{}"
            - "\tresult.Returns = returns[:]"
            - ""
            - "\tif resp.Body != nil {"
            - "\t\tdefer resp.Body.Close()"
            - ""
            - "\t\tif err = json.NewDecoder(resp.Body).Decode(result); err != nil
              {"
            - "\t\t\treturn"
            - "\t\t}"
            - "\t}"
            - ""
            - "\tif result.Error != nil {"
            - "\t\terr = result.Error"
            - "\t}"
            - "\treturn"
            - '}'
            - ""
            - func (c Client_rpc_root) Put(
            - "\tctx context.Context,"
            - "\targ0 *rpc_root.TodoItem,"
            - ) (
            - "\tout0 *rpc_root.TodoItem,"
            - "\terr error,"
            - ) {
            - "\tpayload := []interface{}{arg0}"
            - ""
            - "\tbuf := &bytes.Buffer{}"
            - "\tif err = json.NewEncoder(buf).Encode(payload); err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\tvar req *http.Request"
            - "\treq, err = http.NewRequest(\"POST\", \"http://\"+c.Client.Options.Addr+\"/minitodo/Put\",
              buf)"
            - "\tif err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\treq = req.WithContext(ctx)"
            - ""
            - "\tvar resp *http.Response"
            - "\tresp, err = c.HTTPClient.Do(req)"
            - "\tif err != nil {"
            - "\t\treturn"
            - "\t}"
            - ""
            - "\treturns := [1]interface{}{&out0}"
            - "\tresult := &Result{}"
            - "\tresult.Returns = returns[:]"
            - ""
            - "\tif resp.Body != nil {"
            - "\t\tdefer resp.Body.Close()"
            - ""
            - "\t\tif err = json.NewDecoder(resp.Body).Decode(result); err != nil
              {"
            - "\t\t\treturn"
            - "\t\t}"
            - "\t}"
            - ""
            - "\tif result.Error != nil {"
            - "\t\terr = result.Error"
            - "\t}"
            - "\treturn"
            - '}'
            - ""
            - type Result struct {
            - "\tError   error         `json:\"error\"`"
            - "\tReturns []interface{} `json:\"returns\"`"
            - '}'
            - ""
            - type Client struct {
            - "\tOptions"
            - "\tClient_rpc_root"
            - ""
            - "\tHTTPClient *http.Client"
            - '}'
            - ""
            - type Options struct {
            - "\tAddr string"
            - '}'
            - ""
            - func New(opts *Options) *Client {
            - "\tclient := &Client{"
            - "\t\tOptions:         *opts,"
            - "\t\tClient_rpc_root: Client_rpc_root{},"
            - "\t\tHTTPClient:      &http.Client{},"
            - "\t}"
            - "\tclient.Client_rpc_root.initialize(client)"
            - "\treturn client"
            - '}'
        - name: stderr
          data:
            - ""
- name: ./smoketests.yml \ Client<->Server \ Go
  commands:
    - command: go generate -v ./...
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - ""
        - name: stderr
          data:
            - handler.go
            - main.go
            - api/rpc.go
            - api/client/client.go
            - api/server/server.go
    - command: go build -o ./bin/clientserver .
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - ""
        - name: stderr
          data:
            - ""
    - command: ./bin/clientserver
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - List
            - Update
            - '[alpha] alpha'
            - Update
            - '[beta] beta !DONE!'
            - List
            - '[alpha] alpha'
            - '[beta] beta !DONE!'
            - Destroy
            - '[alpha] alpha'
            - Destroy
            - '[beta] beta !DONE!'
            - List
        - name: stderr
          data:
            - ""
- name: ./smoketests.yml \ Examples \ todoapp
  commands:
    - command: ./build.sh
      checks:
        - name: exitcode
          data:
            - "0"
        - name: stdout
          data:
            - "[================                                  ] - 1 / 3\r[=================================
              \                ] - 2 / 3\r[==================================================]
              - 3 / 3\r                                                                     \rSuccess!
              Compiled 3 modules."
        - name: stderr
          data:
            - ""
