type Things {
    unit   ology
    string ofCharacters
    bool   truthOrDare
    int    ellij
    long   island
    float  ingCastle
    double espresso
    time   travelling
    data   soongType
}

type Containers {
    list<unit>   ologyList
    list<string> ofCharactersList
    list<bool>   truthOrDareList
    list<int>    ellijList
    list<long>   islandList
    list<float>  ingCastleList
    list<double> espressoList
    list<time>   travellingList
    list<data>   soongTypeList

    map<string, unit>   ologyMap
    map<string, string> ofCharactersMap
    map<string, bool>   truthOrDareMap
    map<string, int>    ellijMap
    map<string, long>   islandMap
    map<string, float>  ingCastleMap
    map<string, double> espressoMap
    map<string, time>   travellingMap
    map<string, data>   soongTypeMap
}

enum Enums {
    The
    Quick
    Brown
    Fox
    Jumps
    Over
    The
    Lazy
    Dog
}

rpc AllThe(Things) Things
rpc CatIn(Containers) Containers

// list of containers are not trivial to do in some languages
rpc MixEmUp(Things, Containers, list<Things>) unit
