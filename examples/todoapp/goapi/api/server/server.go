// <auto-generated />
//
// expected import: github.com/chakrit/rpc/todo/api/server
package server

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"

	rpc_root "github.com/chakrit/rpc/todo/api"
)

type Handler_rpc_root struct {
	Handler rpc_root.Interface
}

type Result struct {
	Error   error         `json:"error"`
	Returns []interface{} `json:"returns"`
}

type Server struct {
	options Options
	Handler_rpc_root
}

type Options struct {
	Addr      string
	CtxFilter func(req *http.Request, method string) context.Context
	ErrFilter func(req *http.Request, method string, err error) error
	ErrLog    func(req *http.Request, method string, err error)
}

func New(opts *Options) *Server {
	srv := &Server{options: *opts}
	if srv.options.CtxFilter == nil {
		srv.options.CtxFilter = func(req *http.Request, _ string) context.Context {
			return req.Context()
		}
	}
	if srv.options.ErrFilter == nil {
		srv.options.ErrFilter = func(_ *http.Request, _ string, err error) error {
			return err
		}
	}
	return srv
}

func (s *Server) Listen() error {
	return http.ListenAndServe(s.options.Addr, s.HTTPHandler())
}

func (s *Server) HTTPHandler() http.Handler {
	mux := http.NewServeMux()
	s.register_rpc_root(mux, s.Handler_rpc_root)
	return mux
}

func (s *Server) register_rpc_root(
	mux *http.ServeMux,
	handler Handler_rpc_root,
) *http.ServeMux {

	mux.HandleFunc("/api/Create", func(resp http.ResponseWriter, req *http.Request) {
		var (
			err error
			ctx context.Context
		)

		ctx = s.options.CtxFilter(req, "api/Create")
		req = req.WithContext(ctx)

		resp.Header().Set("Content-Type", "application/json")

		var arg0 string
		args := [1]interface{}{
			&arg0,
		}

		if req.Body != nil {
			if err := json.NewDecoder(req.Body).Decode(&args); err != nil {
				resp.WriteHeader(400)
				renderError(resp, err)
				return
			}
		}

		var (
			out0 *rpc_root.TodoItem
		)

		out0, err = handler.Handler.Create(
			ctx, arg0)

		if err != nil {
			err = s.options.ErrFilter(req, "api/Create", err)
			s.options.ErrLog(req, "api/Create", err)
		}

		result := &Result{
			Error: err,
			Returns: []interface{}{
				out0,
			},
		}

		if buf, err := json.Marshal(result); err != nil {
			resp.WriteHeader(500)
			renderError(resp, err)
		} else {
			resp.WriteHeader(200)
			_, _ = io.Copy(resp, bytes.NewBuffer(buf))
		}
	})

	mux.HandleFunc("/api/Destroy", func(resp http.ResponseWriter, req *http.Request) {
		var (
			err error
			ctx context.Context
		)

		ctx = s.options.CtxFilter(req, "api/Destroy")
		req = req.WithContext(ctx)

		resp.Header().Set("Content-Type", "application/json")

		var arg0 int64
		args := [1]interface{}{
			&arg0,
		}

		if req.Body != nil {
			if err := json.NewDecoder(req.Body).Decode(&args); err != nil {
				resp.WriteHeader(400)
				renderError(resp, err)
				return
			}
		}

		var (
			out0 *rpc_root.TodoItem
		)

		out0, err = handler.Handler.Destroy(
			ctx, arg0)

		if err != nil {
			err = s.options.ErrFilter(req, "api/Destroy", err)
			s.options.ErrLog(req, "api/Destroy", err)
		}

		result := &Result{
			Error: err,
			Returns: []interface{}{
				out0,
			},
		}

		if buf, err := json.Marshal(result); err != nil {
			resp.WriteHeader(500)
			renderError(resp, err)
		} else {
			resp.WriteHeader(200)
			_, _ = io.Copy(resp, bytes.NewBuffer(buf))
		}
	})

	mux.HandleFunc("/api/List", func(resp http.ResponseWriter, req *http.Request) {
		var (
			err error
			ctx context.Context
		)

		ctx = s.options.CtxFilter(req, "api/List")
		req = req.WithContext(ctx)

		resp.Header().Set("Content-Type", "application/json")

		var (
			out0 []*rpc_root.TodoItem
		)

		out0, err = handler.Handler.List(
			ctx)

		if err != nil {
			err = s.options.ErrFilter(req, "api/List", err)
			s.options.ErrLog(req, "api/List", err)
		}

		result := &Result{
			Error: err,
			Returns: []interface{}{
				out0,
			},
		}

		if buf, err := json.Marshal(result); err != nil {
			resp.WriteHeader(500)
			renderError(resp, err)
		} else {
			resp.WriteHeader(200)
			_, _ = io.Copy(resp, bytes.NewBuffer(buf))
		}
	})

	return mux
}

func renderError(resp http.ResponseWriter, e error) {
	result := &Result{
		Error:   e,
		Returns: nil,
	}

	bytes, err := json.Marshal(result)
	if err != nil {
		_, _ = resp.Write([]byte(`{"error":"json processing error"}`))
	} else {
		_, _ = resp.Write(bytes)
	}
}
