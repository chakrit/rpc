// <auto-generated />
//
// expected import: github.com/chakrit/rpc/examples/client
package client

import (
	"bytes"
	"encoding/json"
	"net/http"
	"time"

	gcr1_examples "github.com/chakrit/rpc/examples"
	gcre2_todo "github.com/chakrit/rpc/examples/todo"
	gcret3_auth "github.com/chakrit/rpc/examples/todo/auth"

	gcret4_system "github.com/chakrit/rpc/examples/todo/system"
)

var _ time.Time = time.Time{}

// github.com/chakrit/rpc/examples
var _ gcr1_examples.Interface = Client_gcr1_examples{}

type Client_gcr1_examples struct {
	*Client
	Todo Client_gcre2_todo
}

func (c *Client_gcr1_examples) initialize(client *Client) {
	c.Client = client
	c.Todo = Client_gcre2_todo{}
	c.Todo.initialize(client)
}

// github.com/chakrit/rpc/examples/todo
var _ gcre2_todo.Interface = Client_gcre2_todo{}

type Client_gcre2_todo struct {
	*Client
	Auth   Client_gcret3_auth
	System Client_gcret4_system
}

func (c *Client_gcre2_todo) initialize(client *Client) {
	c.Client = client
	c.Auth = Client_gcret3_auth{}
	c.Auth.initialize(client)
	c.System = Client_gcret4_system{}
	c.System.initialize(client)
}

// github.com/chakrit/rpc/examples/todo/auth
var _ gcret3_auth.Interface = Client_gcret3_auth{}

type Client_gcret3_auth struct {
	*Client
}

func (c *Client_gcret3_auth) initialize(client *Client) {
	c.Client = client
}

func (c Client_gcret3_auth) Authenticate(
	arg0 *gcret3_auth.AuthRequest,
) (
	out0 *gcret3_auth.AuthResponse,
	err error,
) {
	payload := []interface{}{arg0}

	buf := &bytes.Buffer{}
	if err = json.NewEncoder(buf).Encode(payload); err != nil {
		return
	}

	var req *http.Request
	req, err = http.NewRequest("POST", "http://"+c.Client.Options.Addr+"/todo/auth/auth/Authenticate", buf)
	if err != nil {
		return
	}

	var resp *http.Response
	resp, err = c.HTTPClient.Do(req)
	if err != nil {
		return
	}

	returns := [1]interface{}{&out0}
	result := &Result{}
	result.Returns = returns[:]

	if resp.Body != nil {
		defer resp.Body.Close()

		if err = json.NewDecoder(resp.Body).Decode(result); err != nil {
			return
		}
	}

	if result.Error != nil {
		err = result.Error
	}
	return
}

func (c Client_gcret3_auth) Current() (
	out0 *gcre2_todo.User,
	err error,
) {
	payload := []interface{}{}

	buf := &bytes.Buffer{}
	if err = json.NewEncoder(buf).Encode(payload); err != nil {
		return
	}

	var req *http.Request
	req, err = http.NewRequest("POST", "http://"+c.Client.Options.Addr+"/todo/auth/auth/Current", buf)
	if err != nil {
		return
	}

	var resp *http.Response
	resp, err = c.HTTPClient.Do(req)
	if err != nil {
		return
	}

	returns := [1]interface{}{&out0}
	result := &Result{}
	result.Returns = returns[:]

	if resp.Body != nil {
		defer resp.Body.Close()

		if err = json.NewDecoder(resp.Body).Decode(result); err != nil {
			return
		}
	}

	if result.Error != nil {
		err = result.Error
	}
	return
}

// github.com/chakrit/rpc/examples/todo/system
var _ gcret4_system.Interface = Client_gcret4_system{}

type Client_gcret4_system struct {
	*Client
}

func (c *Client_gcret4_system) initialize(client *Client) {
	c.Client = client
}

func (c Client_gcret4_system) Status() (
	out0 *gcr1_examples.Failure,
	err error,
) {
	payload := []interface{}{}

	buf := &bytes.Buffer{}
	if err = json.NewEncoder(buf).Encode(payload); err != nil {
		return
	}

	var req *http.Request
	req, err = http.NewRequest("POST", "http://"+c.Client.Options.Addr+"/todo/system/system/Status", buf)
	if err != nil {
		return
	}

	var resp *http.Response
	resp, err = c.HTTPClient.Do(req)
	if err != nil {
		return
	}

	returns := [1]interface{}{&out0}
	result := &Result{}
	result.Returns = returns[:]

	if resp.Body != nil {
		defer resp.Body.Close()

		if err = json.NewDecoder(resp.Body).Decode(result); err != nil {
			return
		}
	}

	if result.Error != nil {
		err = result.Error
	}
	return
}

type Result struct {
	Error   error         `json:"error"`
	Returns []interface{} `json:"returns"`
}

type Client struct {
	Options
	Client_gcr1_examples

	HTTPClient *http.Client
}

type Options struct {
	Addr string
}

func New(opts *Options) *Client {
	client := &Client{
		Options:              *opts,
		Client_gcr1_examples: Client_gcr1_examples{},
		HTTPClient:           &http.Client{},
	}
	client.Client_gcr1_examples.initialize(client)
	return client
}
